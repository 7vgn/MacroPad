/**
 * \file settings.h
 * Defines the Settings struct, containing the settings for MacroPad.
 * This file is compiled into both the firmware and the settings app.
 */

#ifndef _SETTINGS_H
#define _SETTINGS_H

/// Attribute to make structs tightly packed (this is compiler-dependent)
#define PACKED_STRUCT __attribute__ ((packed))

#include<cstdint>

/**
 * \brief Version number of this software
 * \details The upper byte of this 16-bit unsigned integer contains the major
 * version and the lower byte the minor version (e.g. 0x0104 is v1.4).
 * Both the firmware and the settings app, when generating a Settings struct,
 * write their version number into the attribute. When reading Settings, they
 * check the attribute against their own version.
 * Whenever there is a change in the Settings struct, you need to increment
 * this constant, then re-compile both the firmware and the settings app (both
 * include this header file). Note that changing constants like NUM_PROFILES
 * will also cause Settings struct to change.
 */
#define VERSION 0x0100

/**
 * \brief Key rollover
 * \details Defines how many key presses (not counting modifier keys) can be
 * sent to the host at any one time. Keep in mind that unnecessarily high
 * values will eat up bandwidth on the bus.
 * Note that this only takes effect when report protocol is used. If the host
 * requests boot protocol instead, KRO is fixed at 6.
 */
#ifndef KRO
#define KRO 16
#endif

/**
 * \brief Number of profiles
 * \details Can be changed to accomodate for a larger or smaller EEPROM. The
 * setting take 3 Bytes + NUM_PROFILES * sizeof(Profile), where sizeof(Profile)
 * is currently 6200 Bytes.
 * When NUM_PROFILES is modified, other pieces of code might also need
 * changing, for example makeDefaultSettings().
 */
#define NUM_PROFILES 8

/**
 * \brief Maximum length of the profile name
 * \details Internally, profiles are referred to via an index but towards the
 * user, a textual name is used.
 */
#define MAX_PROFILE_NAME_LEN 32

/**
 * \brief Maximum number of steps in a macro
 */
#define MAX_STEPS_PER_MACRO 4

/**
 * \brief Maximum number of simulanteous keys within an action
 * \details This must not be higher than NKRO, otherwise macros can never
 * be executed.
 */
#define MAX_KEYS_PER_ACTION 6

#if MAX_KEYS_PER_ACTION > KRO
	#error "The maximum number of keys within an Action (MAX_KEYS_PER_ACTION constant) must not exceed KRO."
#endif

/**
 * \{
 * \brief Dimensions of profile images
 */
#define IMG_PROFILE_WIDTH 128
#define IMG_PROFILE_HEIGHT 64
/// \}

/**
 * \{
 * \brief Dimensions of images for input controls (key/knob/slider)
 */
#define IMG_CTRL_WIDTH 38
#define IMG_CTRL_HEIGHT 30
/// \}

/**
 * \{
 * \brief Size of images in bytes
 * \details All images are 1 bit per pixel with rows padded to the next full
 * byte.
 */
#define IMG_SIZE(width, height) ((width) * (((height) + 7) / 8))
#define IMG_PROFILE_SIZE IMG_SIZE(IMG_PROFILE_WIDTH, IMG_PROFILE_HEIGHT)
#define IMG_CTRL_SIZE IMG_SIZE(IMG_CTRL_WIDTH, IMG_CTRL_HEIGHT)
/// \}

/**
 * \brief Determines the type of an Action
 */
enum class ActionType: uint8_t
{
	/// Nothing happens, this is only useful inside macros
	NONE = 0,
	/// Switch to another profile
	SWITCH_PROFILE,
	/// Mouse/keyboard/etc. input
	INPUT
};

/**
 * \brief An Action is a set of inputs that can be sent to the host, like
 * key strokes or mouse movements
 * \details Actions are generated by user inputs - either directy (holding a
 * key down) or indirectly (through a macro). At regular intervals, these
 * actions are collected and compiled into USB HID reports which is then sent
 * to the host.
 * There are also special types of actions concerning profile switching. These
 * are processed locally and do not result in any data being sent to the host.
 */
struct PACKED_STRUCT Action
{
	/**
	 * \brief Type of this Action
	 */
	ActionType type;

	/**
	 * \brief Further information for Actions of type SWITCH_PROFILE
	 */
	struct PACKED_STRUCT
	{
		/**
		 * \brief The index of the profile that should be switched to
		 */
		uint8_t index;
	} switchProfile;

	/**
	 * \brief Further information for Actions of type INPUT
	 */
	struct PACKED_STRUCT
	{
		/**
		 * \brief Status of modifier keys
		 * \details Bits are layed out the same way as defined in the USB
		 * HID specification (c.f. hid_keyboard_modifier_bm_t from TinyUSB):
		 * Bit 0: Left Control
		 * Bit 1: Left Shift
		 * Bit 2: Left Alt
		 * Bit 3: Left Windows
		 * Bit 4: Right Control
		 * Bit 5: Right Shift
		 * Bit 6: Right Alt
		 * Bit 7: Right Windows
		 */
		uint8_t modifiers;

		/**
		 * \brief List of pressed keys
		 * \details The values for the entries are as defined by the USB
		 * HID specification (c.f. the HID_KEY_* constants from TinyUSB).
		 */
		uint8_t keys[MAX_KEYS_PER_ACTION];

		/**
		 * \brief Status of mouse buttons
		 * \details Bits are layed out the same way as defined in the USB
		 * HID specification (c.f. hid_abs_mouse_report_t from TinyUSB):
		 * Bit 0: Left mouse button
		 * Bit 1: Right mouse button
		 * Bit 2: Middle mouse button
		 * Bit 3: Backward button
		 * Bit 4: Forward button
		 */
		uint8_t mouseButtons;

		/**
		 * \{
		 * \brief Relative mouse movement
		 */
		int8_t mouseX, mouseY;
		/// \}

		/**
		 * \{
		 * \brief Relative movement of the vertical and horizontal mouse wheels
		 */
		int8_t mouseWheel, mousePan;
		/// \}

		/**
		 * \brief Consumer control keys
		 */
		uint16_t consumerControl;

		/**
		 * \brief System control key
		 * \details 1 is power down, 2 is sleep, and 3 is wake up
		 */
		uint8_t systemControl;
	} input;
};

/**
 * \brief A MacroStep is an Action plus a duration
 * \details This is used inside the Macro struct.
 */
struct PACKED_STRUCT MacroStep
{
	/**
	 * \brief Duration of this step in 10ms units
	 */
	uint16_t duration;

	/**
	 * \brief The Action that takes place during this step of the Macro
	 */
	Action action;
};

/**
 * \brief A Macro is a sequence of MacroSteps
 * \details Macros allow time-point events (like key presses/releases or knob
 * rotations) to fire off a sequence of Actions.
 */
struct PACKED_STRUCT Macro
{
	/**
	 * \brief Number of steps in this macro
	 */
	uint8_t numSteps;

	/**
	 * \brief Array of the steps in this macro
	 */
	MacroStep steps[MAX_STEPS_PER_MACRO];
};

/**
 * \brief Collects the actions for a key (which might be a normal switch or one
 * built into a rotary encoder)
 */
struct PACKED_STRUCT Key
{
	/**
	 * \brief Defines what constitues a "long" key press rather than a "short"
	 * one
	 * \details Measured in milliseconds.
	 */
	uint16_t longPress;

	/**
	 * \{
	 * \brief Presses and releases are singular events that trigger a macro
	 * \details We distinguish between releases after the key has been held for
	 * a short or a long time.
	 */
	Macro press, release, longRelease;
	/// \}

	/**
	 * \brief Holding a Key is a time interval during which an Action can be
	 * performed
	 * \details This is like a one-step Macro where the duration is "as long as
	 * the key is held".
	 */
	Action hold;

	/**
	 * \brief Image
	 */
	uint8_t image[IMG_CTRL_SIZE];
};

/**
 * \brief Collects the settings for a Knob (Rotary Encoder)
 * \details This only concerns rotations. The integrated push switch of a
 * rotary encoder must be dealt with separately using the Key struct.
 */
struct PACKED_STRUCT Knob
{
	/**
	 * \{
	 * \brief Turning one notch to the left or right are singular events
	 * that trigger a macro
	 */
	Macro left, right;
	/// \}

	/**
	 * \{
	 * \brief Images
	 */
	uint8_t imageLeft[IMG_CTRL_SIZE];
	uint8_t imageRight[IMG_CTRL_SIZE];
	/// \}
};

/**
 * \brief Collects the settings for a Slider (Linear Potentiometer)
 */
struct PACKED_STRUCT Slider
{
	/**
	 * \brief Image
	 */
	uint8_t image[IMG_CTRL_SIZE];
};

/**
 * \brief A Profile collects all input control assignments that can be active
 * at any one point in time
 */
struct PACKED_STRUCT Profile
{
	/**
	 * \brief Name of this profile
	 * \details The string is \\0-terminated
	 */
	char name[MAX_PROFILE_NAME_LEN];

	/**
	 * \brief Picture for this profile
	 */
	uint8_t image[IMG_PROFILE_SIZE];

	/**
	 * \brief Array of Keys
	 * \details keys[0..5] are the normal switches, keys[6..8] the ones built
	 * into the rotary encoders (both left to right)
	 */
	Key keys[9];

	/**
	 * \brief Array of Knobs
	 * \details Left to right
	 */
	Knob knobs[3];

	/**
	 * \brief Slider
	 */
	Slider slider;
};

/**
 * \brief Settings are a collection of Profiles
 */
struct PACKED_STRUCT Settings
{
	/**
	 * \brief Version
	 * \details The version of the software that was used to create these
	 * settings.
	 */
	uint16_t version;

	/**
	 * \brief Currently active profile
	 */
	uint8_t activeProfile;

	/**
	 * \brief Array of all the profiles
	 * \details Indices refer to this array
	 */
	Profile profiles[NUM_PROFILES];

};

#endif // _SETTINGS_H
